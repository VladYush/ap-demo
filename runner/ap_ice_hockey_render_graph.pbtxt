profiler_config {
  trace_enabled: true
  enable_profiler: true
  trace_log_interval_count: 200
}
#Decodes an input video file into images and a video header.
node {
    calculator: "OpenCvVideoDecoderCalculator"
    input_side_packet: "INPUT_FILE_PATH:input_video_path"
    output_stream: "VIDEO:input_video"
    output_stream : "VIDEO_PRESTREAM:input_video_header"
}

node {
    calculator: "AutoproductionIceHockeyCalculator"
    input_stream: "IMAGE_FRAME:input_video"
    output_stream: "RECT:rois"
    output_stream: "DETECTIONS:detections"
}

# Converts the detections to drawing primitives for annotation overlay.
node {
  calculator: "DetectionsToRenderDataCalculator"
  input_stream: "DETECTIONS:detections"
  output_stream: "RENDER_DATA:detections_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.DetectionsToRenderDataCalculatorOptions] {
      thickness: 1.0
      color { r: 70 g: 77 b: 119 }
    }
  }
}

# Converts the detections to drawing primitives for annotation overlay.
node {
  calculator: "RectToRenderDataCalculator"
  input_stream: "RECT:rois"
  output_stream: "RENDER_DATA:rois_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.RectToRenderDataCalculatorOptions] {
      thickness: 2.0
      color { r: 249 g: 219 b: 109 }
    }
  }
}

# Draws annotations and overlays them on top of the input images.
node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "IMAGE:input_video"
  input_stream: "rois_render_data"
  input_stream: "detections_render_data"
  output_stream: "IMAGE:output_video"
}


#Encodes the annotated images into a video file, adopting properties specified
#in the input video header, e.g., video framerate.
node {
    calculator: "OpenCvVideoEncoderCalculator"
    input_stream: "VIDEO:output_video"
    input_stream: "VIDEO_PRESTREAM:input_video_header"
    input_side_packet: "OUTPUT_FILE_PATH:output_video_path"
    node_options: {
        [type.googleapis.com / mediapipe.OpenCvVideoEncoderCalculatorOptions]: {
            codec: "avc1"
            video_format: "mp4"
        }
    }
}
